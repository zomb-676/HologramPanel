plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'org.jetbrains.kotlin.jvm' version '2.1.20'
}

version = "$minecraft_version-$mod_version"
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.shedaniel.me"
    }
    maven {
        name 'IzzelAliz Maven'
        url 'https://maven.izzel.io/releases/'
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

kotlin {
    jvmToolchain(21)
    compilerOptions {
        freeCompilerArgs.add("-Xcontext-parameters")
        freeCompilerArgs.add("-Xwhen-guards")
    }
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers.from(new File('src/main/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        client2 {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArguments.add('--username=Dev2')
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            jvmArguments.add("-Dmixin.debug=true")
            jvmArguments.add("-Dmixin.debug.export=true")

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets.main.java { srcDir("src/main/kotlin") }

Closure<ModuleDependency> modernUIExcludes = { ModuleDependency dep ->
    dep.exclude group: "org.apache.logging.log4j", module: "log4j-core"
    dep.exclude group: "org.apache.logging.log4j", module: "log4j-api"
    dep.exclude group: "com.google.code.findbugs", module: "jsr305"
    dep.exclude group: "org.jetbrains", module: "annotations"
    dep.exclude group: "com.ibm.icu", module: "icu4j"
    dep.exclude group: "it.unimi.dsi", module: "fastutil"
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:2.1.20")
    jarJar(implementation("org.jetbrains.kotlin:kotlin-stdlib:2.1.20"))
    additionalRuntimeClasspath "org.jetbrains.kotlin:kotlin-stdlib:2.1.20"

    runtimeOnly("curse.maven:jade-324717:6170888")
    implementation("me.shedaniel:RoughlyEnoughItems-neoforge:18.0.800")

    //compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    //runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    runtimeOnly("icyllis.modernui:ModernUI-Core:${modernui_core_version}", modernUIExcludes)
    additionalRuntimeClasspath("icyllis.modernui:ModernUI-Core:${modernui_core_version}", modernUIExcludes)
    additionalRuntimeClasspath("icyllis.modernui:ModernUI-Markdown:${modernui_core_version}", modernUIExcludes)
    runtimeOnly("icyllis.modernui:ModernUI-Markdown:${modernui_core_version}", modernUIExcludes)
    runtimeOnly "icyllis.modernui:ModernUI-NeoForge:${minecraft_version}-${modernui_forge_version}"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
